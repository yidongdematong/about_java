package aboutobjectoriented;

/**
 * @author ：wangh
 * @date ：Created in 2025/9/3 21:22
 * @description：关于final类
 * @modified By：
 * @version: 1.0.0
 * 如果声明类时使用了 final 修饰符，那么这个类无法被扩展或定义子类。
 * 换句话说，任何其他类都不能使用 extends 关键字来创建这个 final 类的子类。
 *
 * 为什么要使用final类？
 * 1.保证安全性（Security）和不变性（Immutability）：
 * 1.1.如果一个类的实现细节非常重要，任何对其的修改都可能破坏其内部状态或逻辑（例如，破坏不变性条件），那么就应该将这个类声明为 final。
 * 1.2. 防止子类通过重写方法（Override）来改变父类的行为，从而确保父类方法的实现始终是可靠和可预测的。
 * Java 标准库中的 String 类就是一个最好的例子。String 被设计为不可变类（Immutable Class），如果允许继承 String 并重写其方法，就可能创建出可变的“字符串”，
 * 这会彻底破坏 Java 程序的安全性基础（例如，网络连接、文件路径的安全性都可能因此被篡改）。
 *
 * 2. 提升性能（Performance）：
 * 2.1.编译器和方法运行时环境（如 JVM）能够对 final 类的方法进行优化。因为它知道这些方法不可能在子类中被重写（因为没有子类），
 * 所以可以安全地使用静态绑定（Static Binding） 或内联（Inlining） 等优化技术。
 * 2.2.  虽然现代 JVM 非常智能，即使没有 final 关键字也能做出很好的优化，但在某些极端性能敏感的场景下，这仍然是一个有益的考虑。
 *
 * 关键特点
 * 禁止继承： 这是最直接的特点。尝试继承一个 final 类会导致编译错误。
 *类中的方法自动成为 final： 在一个 final 类中，所有方法都隐式地是 final 的（但这并不影响它们自身的访问权限）。因为类不能被继承，所以其中的方法自然也都不可能被重写。不过，显式地给方法加上 final 关键字是多余的，但语法上允许。
 *字段不受影响： final 类中的字段不会被自动变为 final。需要根据自己的设计意图，显式地使用 final 关键字来声明常量字段。
 *
 * 何时应该将自己的类声明为 final？
 *
 * 1.设计为不可变类时： 如果你的类被设计成创建后状态就不能改变（所有字段都是 final 并在构造函数中初始化），
 * 那么强烈建议将类也声明为 final。这是防止子类破坏其不变性的最后一道防线（例如，子类可能将状态字段改为非 final 的）。
 * 2. 提供完整且稳定的 API 时： 如果你的类是一个工具类或核心服务类，其功能已经非常完善和稳定，不希望也不允许其他人通过继承来修改或扩展其行为（或许他们应该使用组合而非继承），那么就将其声明为 final。
 * 3. 出于安全考虑时： 如果类的内部实现涉及敏感操作或数据，防止恶意子类篡改其行为是至关重要的。
 *
 * 不要随意地将所有类都设为 final。这会限制代码的灵活性和可扩展性。继承是面向对象编程的一个重要特性，只有在有充分理由（如上述安全性、不变性）时，才应该使用 final 来限制它。通常，优先考虑“组合优于继承”的设计原则。
 */
public final class AboutFinalClass {

    public final int a = 1;
    public  String finalMethod() {
        return "final method";
    }

    public static void main(String[] args) {

    }
}
